# 1 "lib/lexer.mll"
 
 open Parser
 exception SyntaxError of string

# 7 "lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\239\255\240\255\084\000\242\255\244\255\245\255\246\255\
    \247\255\000\000\002\000\004\000\254\255\001\000\255\255\103\000\
    \020\000\012\000\016\000\010\000\028\000\005\000\018\000\253\255\
    \020\000\015\000\252\255\250\255\248\255\135\000\251\255\252\255\
    \018\000\254\255\002\000\023\000\255\255\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\014\000\255\255\255\255\255\255\255\255\
    \255\255\015\000\006\000\012\000\255\255\001\000\255\255\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\255\255\001\000\003\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\031\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\014\000\012\000\012\000\033\000\013\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \011\000\004\000\010\000\027\000\007\000\009\000\015\000\022\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\006\000\023\000\037\000\008\000\028\000\003\000\
    \036\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\005\000\024\000\018\000\019\000\
    \020\000\021\000\025\000\026\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\033\000\000\000\003\000\034\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\032\000\
    \000\000\035\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\013\000\034\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\010\000\000\000\000\000\011\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\022\000\032\000\000\000\009\000\000\000\
    \035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\016\000\017\000\018\000\
    \019\000\020\000\024\000\025\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\255\255\
    \255\255\029\000\255\255\003\000\029\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\029\000\
    \255\255\029\000\255\255\003\000\255\255\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\015\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\000\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 9 "lib/lexer.mll"
              ( token lexbuf )
# 150 "lib/lexer.ml"

  | 1 ->
# 10 "lib/lexer.mll"
           ( Lexing.new_line lexbuf; token lexbuf )
# 155 "lib/lexer.ml"

  | 2 ->
# 11 "lib/lexer.mll"
               ( PROVE )
# 160 "lib/lexer.ml"

  | 3 ->
# 12 "lib/lexer.mll"
            ( HINT )
# 165 "lib/lexer.ml"

  | 4 ->
# 13 "lib/lexer.mll"
        ( comment 0 lexbuf )
# 170 "lib/lexer.ml"

  | 5 ->
# 14 "lib/lexer.mll"
        ( ENDCOMMENT )
# 175 "lib/lexer.ml"

  | 6 ->
# 15 "lib/lexer.mll"
       ( STAR )
# 180 "lib/lexer.ml"

  | 7 ->
# 16 "lib/lexer.mll"
        ( ARROW )
# 185 "lib/lexer.ml"

  | 8 ->
# 17 "lib/lexer.mll"
       ( EQUAL )
# 190 "lib/lexer.ml"

  | 9 ->
# 18 "lib/lexer.mll"
       ( COMMA )
# 195 "lib/lexer.ml"

  | 10 ->
# 19 "lib/lexer.mll"
       ( COLON )
# 200 "lib/lexer.ml"

  | 11 ->
# 20 "lib/lexer.mll"
       ( BAR )
# 205 "lib/lexer.ml"

  | 12 ->
# 21 "lib/lexer.mll"
       ( LPAREN )
# 210 "lib/lexer.ml"

  | 13 ->
# 22 "lib/lexer.mll"
       ( RPAREN )
# 215 "lib/lexer.ml"

  | 14 ->
let
# 23 "lib/lexer.mll"
                                              id
# 221 "lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 23 "lib/lexer.mll"
                                                 ( 
    match id with
    | "let" -> LET
    | "with" -> WITH
    | "match" -> MATCH
    | "of" -> OF
    | "type" -> TYPE
    | "rec" -> REC
    | "axiom" -> AXIOM
    | "induction" -> INDUCTION
    | _ -> IDENT id )
# 235 "lib/lexer.ml"

  | 15 ->
# 34 "lib/lexer.mll"
     ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 240 "lib/lexer.ml"

  | 16 ->
# 35 "lib/lexer.mll"
       ( EOF )
# 245 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment level lexbuf =
   __ocaml_lex_comment_rec level lexbuf 29
and __ocaml_lex_comment_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "lib/lexer.mll"
        ( if level = 0 then token lexbuf else comment (level - 1) lexbuf )
# 257 "lib/lexer.ml"

  | 1 ->
# 39 "lib/lexer.mll"
           ( Lexing.new_line lexbuf; comment level lexbuf )
# 262 "lib/lexer.ml"

  | 2 ->
# 40 "lib/lexer.mll"
        ( comment (level + 1) lexbuf )
# 267 "lib/lexer.ml"

  | 3 ->
# 41 "lib/lexer.mll"
     ( comment level lexbuf )
# 272 "lib/lexer.ml"

  | 4 ->
# 42 "lib/lexer.mll"
       ( raise (SyntaxError "Unclosed comment") )
# 277 "lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec level lexbuf __ocaml_lex_state

;;

