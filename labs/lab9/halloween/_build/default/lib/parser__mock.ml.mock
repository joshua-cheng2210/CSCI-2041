
type token = 
  | WORD of (
# 1 "lib/parser.mly"
       (string)
# 7 "lib/parser__mock.ml.mock"
)
  | EOF

let menhir_begin_marker =
  0

and (xv_main, xv_line) =
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) (
# 7 "lib/parser.mly"
      _2
# 18 "lib/parser__mock.ml.mock"
   : unit) (_startpos__2_ : Lexing.position) (_endpos__2_ : Lexing.position) (_startofs__2_ : int) (_endofs__2_ : int) (_loc__2_ : Lexing.position * Lexing.position) (
# 7 "lib/parser.mly"
 _1
# 22 "lib/parser__mock.ml.mock"
   : 'tv_line) (_startpos__1_ : Lexing.position) (_endpos__1_ : Lexing.position) (_startofs__1_ : int) (_endofs__1_ : int) (_loc__1_ : Lexing.position * Lexing.position) ->
    ((
# 7 "lib/parser.mly"
           ( _1 )
# 27 "lib/parser__mock.ml.mock"
     : 'tv_main) : (
# 4 "lib/parser.mly"
      (string list)
# 31 "lib/parser__mock.ml.mock"
    )) in
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) (
# 10 "lib/parser.mly"
      _2
# 36 "lib/parser__mock.ml.mock"
   : 'tv_line) (_startpos__2_ : Lexing.position) (_endpos__2_ : Lexing.position) (_startofs__2_ : int) (_endofs__2_ : int) (_loc__2_ : Lexing.position * Lexing.position) (
# 10 "lib/parser.mly"
 _1
# 40 "lib/parser__mock.ml.mock"
   : (
# 1 "lib/parser.mly"
       (string)
# 44 "lib/parser__mock.ml.mock"
  )) (_startpos__1_ : Lexing.position) (_endpos__1_ : Lexing.position) (_startofs__1_ : int) (_endofs__1_ : int) (_loc__1_ : Lexing.position * Lexing.position) ->
    (
# 10 "lib/parser.mly"
            ( _1 :: _2 )
# 49 "lib/parser__mock.ml.mock"
     : 'tv_line) in
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) ->
    (
# 9 "lib/parser.mly"
  ( [] )
# 55 "lib/parser__mock.ml.mock"
     : 'tv_line) in
  ((let rec diverge() = diverge() in diverge()) : 'tv_main * 'tv_line)

and menhir_end_marker =
  0
